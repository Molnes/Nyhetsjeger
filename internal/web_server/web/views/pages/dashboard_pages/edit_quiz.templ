package dashboard_pages

import (
	"fmt"

	"github.com/Molnes/Nyhetsjeger/internal/web_server/web/views/components"
	"github.com/Molnes/Nyhetsjeger/internal/web_server/web/views/components/layout_components"
	"github.com/Molnes/Nyhetsjeger/internal/web_server/web/views/components/dashboard_components/edit_quiz"
	"github.com/Molnes/Nyhetsjeger/internal/models/articles"
	"github.com/Molnes/Nyhetsjeger/internal/models/quizzes"
)

// Constants for the input names (for HTTP POST requests)
const QuizTitle = "quiz-title"
const QuizImageURL = "quiz-image-url"
const QuizPublished = "quiz-is-published"

// The "Edit quiz" page. This page is used to edit a quiz.
// Add title, image, articles, active time, questions and answers.
templ EditQuiz(quiz *quizzes.Quiz, articles *[]articles.Article) {
	@layout_components.DashBoardLayout("Rediger Quiz") {
		<div class="flex flex-col items-center gap-3 max-w-screen-sm m-auto px-5 py-3">
			<h1 class="text-2xl">Rediger Quiz</h1>
			// Quiz Title
			@dashboard_components.EditQuizForm(fmt.Sprintf("/api/v1/admin/quiz/edit-title?quiz-id=%s", quiz.ID)) {
				<div class="flex flex-row items-center gap-3">
					<label for="quiz-title" class="block">Tittel</label>
					@components.LoadingIndicator()
				</div>
				@dashboard_components.EditTitleInput(quiz.Title, quiz.ID.String(), QuizTitle)
			}
			// Quiz Image
			@dashboard_components.EditQuizForm(fmt.Sprintf("/api/v1/admin/quiz/edit-image?quiz-id=%s", quiz.ID)) {
				<div class="flex flex-row items-center gap-3">
					<label for="quiz-title" class="block">Forside bilde</label>
					@components.LoadingIndicator()
				</div>
				// TODO: Also support uploading an image
				// <input id="quiz-image" type="file" accept="image/png, image/jpg, image/jpeg, image/webp" class="bg-gray-100 p-3 w-full [&:hover]:cursor-pointer mb-2"/>
				@dashboard_components.EditImageInput(&quiz.ImageURL, quiz.ID.String(), QuizImageURL)
			}
			// Quiz Articles
			@dashboard_components.EditQuizForm("") {
				<h2>Artikler i quizzen</h2>
				<div class="flex flex-row gap-5 mb-3">
					<label for="add-article">Link<input type="text" id="add-article" class="bg-gray-200 px-2 py-1 ml-3"/></label>
					<button hx-post="" id="add-article" class="bg-gray-300 px-5 py-1">
						Legg til ➕
					</button>
				</div>
				// List of all articles
				<ul id="article-list" class="w-full bg-gray-300 [&>*:nth-child(odd)]:bg-gray-200">
					if len(*articles) == 0 {
						<li class="text-center px-2 py-4">Ingen artikler lagt til enda.</li>
					}
					for _, article := range *articles {
						if article.ID.Valid {
							@dashboard_components.ArticleListItem(article.ArticleURL.String())
						}
					}
				</ul>
			}
			// Quiz Active Time
			@dashboard_components.EditQuizForm("") {
				<h2>Aktiv</h2>
				<div class="block mb-3"><label for="quiz-active-start" class="mr-4">Fra</label><input id="quiz-active-start" type="date" class="bg-gray-200 px-3 py-1" value={ quiz.AvailableFrom.Format("2006-01-01") }/></div>
				<div class="block mb-3"><label for="quiz-active-end" class="mr-5">Til</label><input id="quiz-active-end" type="date" class="bg-gray-200 px-3 py-1" value={ quiz.AvailableTo.Format("2006-01-01") }/></div>
			}
			// Quiz Questions
			@dashboard_components.EditQuizForm("") {
				<h2>Spørsmål</h2>
				// List of all questions
				<ul class="w-full bg-gray-300 [&>*:nth-child(odd)]:bg-gray-200">
					if len(quiz.Questions) == 0 {
						<li class="text-center px-2 py-4">Ingen spørsmål lagt til enda.</li>
					}
					for _, question := range quiz.Questions {
						@dashboard_components.QuestionListItem(&question)
					}
				</ul>
				<button hx-get={ fmt.Sprintf("/dashboard/edit-quiz/new-question?quiz-id=%s", quiz.ID) } hx-swap="innerHTML" hx-target="#question-modal" hx-trigger="click" type="button" id="new-question-button" class="mt-3 px-3 py-1 bg-gray-300 block mx-auto">Legg til nytt spørsmål ➕</button>
				// <button type="button" id="new-question-button" class="mt-3 px-3 py-1 bg-gray-300 block mx-auto">Legg til nytt spørsmål ➕</button>
			}
			// Quiz Buttons: Delete, Hide, OK
			<div class="flex flex-row justify-around w-full px-5 py-3 mt-5">
				<button class="bg-gray-100 text-red-600 font-bold px-3 py-2 w-40">Slett quiz</button>
				@dashboard_components.ToggleQuizPublished(quiz.Published, QuizPublished)
				<button class="bg-gray-100 font-bold px-3 py-2 w-40">OK</button>
			</div>
		</div>
	}
	<dialog
		id="question-modal"
		class="px-10 py-5 border border-black border-solid min-w-80"
	></dialog>
	@modalWindowScript()
}

// Opens the modal window needed to add or edit a question.

script modalWindowScript() {
		const questionModal = document.getElementById("question-modal");
		const editQuestionButtons = document.getElementsByClassName("edit-question-button");
		const newQuestionButton = document.getElementById("new-question-button");

		// Open the modal window
		function openQuestionModal() {
			if (!questionModal.open) {
				questionModal.showModal();
			}
		}

		// Add event listeners to the buttons for opening the modal
		for (let i = 0; i < editQuestionButtons.length; i++) {
    	editQuestionButtons[i].addEventListener('click', openQuestionModal);
		}

		newQuestionButton.addEventListener("click", openQuestionModal);
}
