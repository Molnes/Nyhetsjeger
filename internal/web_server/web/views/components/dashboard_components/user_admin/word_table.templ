package user_admin

import "math"
import "github.com/Molnes/Nyhetsjeger/internal/web_server/web/views/components/icons"
import "fmt"

// Calculates the maximum amount of pages needed to display all users.
func calculateMaxPages(userAmount int, usernamesPerPage int) int {
	return int(math.Ceil(float64(userAmount) / float64(usernamesPerPage)))
}

// Returns the content of a row in the table, if the index is out of bounds, return an empty string.
func setRowContent(words []string, i int) string {
	if i >= len(words) {
		return ""
	} else {
		return words[i]

	}
}

script deleteRow(row string) {
	var row = document.getElementById(row);
	if (row != null) {
		let parent = row.parentElement;
		deleteMap.set(row.id, true);
		parent.classList.add("bg-red-500", "border-b", "border-red-700");
		parent.getElementsByClassName("del-button")[0].disabled = true;
		parent.getElementsByClassName("undo-button")[0].classList.remove("hidden");
		sessionStorage.deletemap = JSON.stringify(Array.from(deleteMap.entries()));
	}
}

script onEditRow(id string, originalValue string) {

	var input = document.getElementById(id);
	if (input != null) {
		if (input.value != originalValue) {
			editMap.set(input.id, [originalValue, input.value]);
		}
	}
}

// A table that displays a list of words, includes pagination component.
templ WordTable(words []string, tableName string, page int, wordCount int, tableID string, pagnationParam string, usernamesPerPage int) {
	<div>
		<table
			id={ tableID }
			class="table-fixed w-52 border-separate overflow-hidden border-spacing-0 rounded-card border border-gray-400 bg-white
				[&_td]:border-black [&_tr]:h-8"
		>
			<thead>
				<tr class="[&>th]:border-black">
					<th class="px-4">{ tableName } </th>
				</tr>
			</thead>
			<tbody
				class="
						[&_tr:nth-child(odd)]:bg-purple-100  
						[&>tr:last-child]:border-b [&>tr:last-child]:border-black"
			>
				for i := range usernamesPerPage {
					<tr>
						<td class="px-4 h-8 w-full flex flex-row items-center">
							<input id={ fmt.Sprintf("%v-%v", tableID, setRowContent(words, i)) } type="text" class="w-3/4 bg-transparent" onblur={ onEditRow(fmt.Sprintf("%v-%v", tableID, setRowContent(words, i)), setRowContent(words, i)) } value={ setRowContent(words, i) }/>
							<div class="ml-auto my-auto">
								<button class="hidden undo-button">
									@icons.Undo(2, "gray", 24, 24)
								</button>
								<button onclick={ deleteRow(fmt.Sprintf("%v-%v", tableID, setRowContent(words, i))) } class="del-button">
									@icons.Trashcan(32, "gray", 24, 24)
								</button>
							</div>
						</td>
					</tr>
				}
			</tbody>
		</table>
		<div class="flex justify-center mt-3">
			@Pagination(tableID, pagnationParam, calculateMaxPages(wordCount, usernamesPerPage), page)
		</div>
	</div>
}
