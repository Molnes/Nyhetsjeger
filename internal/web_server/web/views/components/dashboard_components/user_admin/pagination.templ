package user_admin

import "fmt"
import "strconv"
import "net/url"

// Pagination is the main component for the pagination.
// ID must be unique for each pagination component in the page.
// queryParamName is the key for the query parameter that will be used for the pagination.
// maxPages is the maximum number of pages.
// page is the current page.
templ Pagination(id string, queryParamName string, maxPages int, page int, url *url.URL) {
	@prevButton(page, id, url, queryParamName)
	@pageNumber(page, maxPages)
	@nextButton(page, maxPages, id, url, queryParamName)
	/* @insertHxGet(id, queryParamName) */
}

// handlePagination ensures that the page number is within the range of the maximum pages
func handlePagination(page int, maxPages int) int {
	if page < 1 {
		page = 1
	} else if page > maxPages {
		page = maxPages
	}
	return page
}

// createButtonUrl creates the URL for the next and previous buttons.
// pageChange is the number of pages to move forward or backward.
// queryParamName is the name for the query parameter that will be used for the pagination.
func createButtonUrl(url url.URL, pageChange int, queryParamName string) string {
	parameterString := url.Query()

	param := parameterString.Get(queryParamName)

	if param == "" {
		param = "1"
	}

	page, err := strconv.Atoi(param)
	if err != nil {
		page = 1
	}

	page += pageChange

	if page < 1 {
		page = 1
	}

	parameterString.Set(queryParamName, strconv.Itoa(page))

	url.RawQuery = parameterString.Encode()

	return url.String()
}

// pageNumber is the component showing the current page number and the maximum pages
templ pageNumber(currentPage int, maxPages int) {
	if maxPages > 1 {
		<button class="border-cindigo border-y text-cindigo  px-3 py-1" disabled>
			{ fmt.Sprintf("%v of %v", handlePagination(currentPage, maxPages), maxPages) }
		</button>
	} else {
		<button class="border-cindigo border-y  text-indigo-300 px-3 py-1" disabled>
			{ fmt.Sprintf("%v of %v", handlePagination(currentPage, maxPages), maxPages) }
		</button>
	}
}

// prevButton is the component for the previous button
templ prevButton(page int, parentTableID string, url *url.URL, queryParamName string) {
	if page <= 1 {
		<button
			id={ fmt.Sprintf("prev-button-%v", parentTableID) }
			class="border-cindigo bg-gray-200 rounded-l-button border text-indigo-300 font-bold px-3 py-1"
			disabled
		>
			&lt;
		</button>
	} else {
		<button
			id={ fmt.Sprintf("prev-button-%v", parentTableID) }
			hx-trigger="click"
			hx-post={ createButtonUrl(*url, -1, queryParamName) }
			hx-swap="outerHTML"
			hx-target="#tables-wrapper"
			class="border-cindigo border bg-clightindigo text-cindigo rounded-l-button font-bold px-3 py-1"
		>&lt;</button>
	}
}

// nextButton is the component for the next button
templ nextButton(page int, maxPages int, parentTableID string, url *url.URL, queryParamName string) {
	if page >= maxPages {
		<button
			id={ fmt.Sprintf("next-button-%v", parentTableID) }
			class="border-cindigo bg-gray-200 border rounded-r-button text-indigo-300 font-bold px-3 py-1"
			disabled
		>
			&gt;
		</button>
	} else {
		<button
			id={ fmt.Sprintf("next-button-%v", parentTableID) }
			hx-trigger="click"
			hx-post={ createButtonUrl(*url, 1, queryParamName) }
			hx-swap="outerHTML"
			hx-target="#tables-wrapper"
			class="border-cindigo border bg-clightindigo rounded-r-button text-cindigo font-bold px-3 py-1"
		>&gt;</button>
	}
}
