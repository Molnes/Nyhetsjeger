package dashboard_components

import (
	"net/url"
	"github.com/Molnes/Nyhetsjeger/internal/web_server/web/views/components"
	"github.com/Molnes/Nyhetsjeger/internal/web_server/web/views/components/icons"
	"github.com/google/uuid"
	"fmt"
)

const (
	IdPrefixQuiz     = "quiz"
	IdPrefixQuestion = "question"
)

var randomId uuid.UUID

// An input field for updating the image.
// When the value is changed, send a POST request to the given URL for updating the image.
// It will trigger the previous loading indicator to display.
// If post is set to false, it will not send a request when the value is changed.
//
// The idPrefix is added to elements with ids used within JS scripts.
// They need to be consistant in the replacement html,
// and there must not be multiple instances of EditImageInput with the same idPrefixes in the DOM.
// (example: quzi image editing and question iamge editing should have different prefixes to not interfere)
templ EditImageInput(imageURLEndpoint string, imageFileEndpoint string, imageURL *url.URL, post bool, errorText string, idPrefix string) {
	<div class="image-input-wrapper">
		<div class="flex flex-row bg-violet-50 border border-clightindigo rounded-t-card overflow-hidden">
			<button
				class="flex-grow flex flex-row gap-2 justify-center items-center px-4 py-3 bg-violet-200 hover:bg-violet-200 rounded-tl-card"
				data-element-type="tab-link"
				type="button"
			>
				Last opp med URL
				@icons.Link(2, "dimgray", 20, 20)
			</button>
			<button
				class="flex-grow flex flex-row gap-2 justify-center items-center px-4 py-3 bg-violet-100 hover:bg-violet-200 rounded-tr-card"
				data-element-type="tab-link"
				type="button"
			>
				Last opp med fil
				@icons.Upload(2, "dimgray", 20, 20)
			</button>
		</div>
		<div class="border-b border-l border-r border-clightindigo rounded-b-card p-4">
			<div id={ fmt.Sprintf("%s-image-url-input-tab", idPrefix) } class="min-h-12 flex flex-row items-center gap-3 flex-wrap mb-3" data-element-type="tab-content">
				<label for={ fmt.Sprintf("%s-image-url-input", idPrefix) }>Velg URL</label>
				<input
					id={ fmt.Sprintf("%s-image-url-input", idPrefix) }
					name="image-url"
					class="bg-purple-100 px-4 py-2 rounded-input border border-clightindigo w-1/2 flex-grow"
					type="text"
					value={ imageURL.String() }
					placeholder="https://picsum.photos/id/1/900/600"
				/>
				if post {
					<button
						type="button"
						class="bg-clightindigo px-4 py-2 rounded-button"
						hx-post={ imageURLEndpoint }
						hx-trigger="click"
						hx-swap="outerHTML"
						hx-target="closest .image-input-wrapper"
						hx-target-4*="next .error-image"
						hx-sync="closest form:abort"
						hx-indicator="previous .htmx-indicator"
					>Last opp</button>
				}
			</div>
			<div id={ fmt.Sprintf("%s-image-file-input-tab", idPrefix) } class="min-h-12 flex flex-row items-center gap-3 mb-3 hidden relative" data-element-type="tab-content">
				<input
					id={ fmt.Sprintf("%s-image-file-input", idPrefix) }
					name="image-file"
					hidden
					type="file"
					accept="image/png, image/jpeg, image/jpg, image/gif, image/webp"
				/>
				<div class="flex flex-col flex-grow">
					<label for={ fmt.Sprintf("%s-image-file-input", idPrefix) }>Velg en fil</label>
					<div class="flex flex-row justify-center items-center gap-3 mt-2 mb-3">
						<div class="flex flex-col flex-grow justify-center items-center bg-purple-50 px-4 py-2 rounded-input border border-clightindigo text-gray-900">
							@icons.Upload(2, "dimgray", 30, 30)
							<p>Dra og slipp, eller</p>
							<button
								class="underline"
								onclick={ openFileChooser(fmt.Sprintf("%s-image-file-input", idPrefix)) }
							>bla gjennom filene dine</button>
							<p id={ fmt.Sprintf("%s-file-name-display", idPrefix) } class="text-gray-700 mt-2">Ingen fil valgt</p>
						</div>
						if post {
							<button
								type="button"
								class="bg-clightindigo px-4 py-2 rounded-button flex-shrink-0"
								hx-post={ imageFileEndpoint }
								hx-trigger="click"
								hx-swap="outerHTML"
								hx-target="closest .image-input-wrapper"
								hx-target-4*="next .error-image"
								hx-sync="closest form:abort"
								hx-indicator="previous .htmx-indicator"
							>Last opp</button>
						}
					</div>
				</div>
				<div
					id={ fmt.Sprintf("%s-file-drop-zone", idPrefix) }
					class="absolute top-0 w-full h-full border border-dashed border-cindigo bg-purple-100 bg-opacity-75 rounded-card flex items-center justify-center text-4xl text-cindigo font-sans hidden"
				>
					Slipp her
				</div>
			</div>
			@indicateDragAndDrop(fmt.Sprintf("%s-image-file-input", idPrefix), fmt.Sprintf("%s-file-drop-zone", idPrefix), fmt.Sprintf("%s-file-name-display", idPrefix))
			// If there is no image URL, display a message saying that no image is selected.
			// If there is an image URL, display the image and a button to remove it.
			if imageURL.String() == "" && post {
				<p class="text-sm text-gray-500">Ingen bilde valgt enda.</p>
			} else if imageURL.String() != "" && post {
				// This div wrapper is to prevent a layout shift while loading the image
				<div style="height: 200px" class="mx-auto mb-3">
					<img
						src={ imageURL.String() }
						height="200"
						width="300"
						style="height: 100%"
						class="rounded-lg mx-auto object-cover"
						alt=""
					/>
				</div>
				<button
					id={ fmt.Sprintf("%s-remove-image-button", idPrefix) }
					type="button"
					class="bg-clightindigo px-4 py-2 block mx-auto rounded-button"
					if post {
						hx-delete={ imageURLEndpoint }
						hx-swap="outerHTML"
						hx-target="closest .image-input-wrapper"
						hx-indicator="previous .htmx-indicator"
					}
				>Fjern bilde</button>
			}
			@components.ErrorText("error-image", errorText)
		</div>
		@switchTabs()
	</div>
}

script switchTabs() {
	// When the user clicks on the "URL" button, show the URL input and hide the file input.
	// When the user clicks on the "Fil" button, show the file input and hide the URL input.const tablinks = document.querySelectorAll('[data-element-type="tab-link"]');
	const tabcontents = document.querySelectorAll('[data-element-type="tab-content"]');
	const tablinks = document.querySelectorAll('[data-element-type="tab-link"]');

	const switchTabsListener = (event, tablink, index) => {
		// Toggle tab selected
		tablinks.forEach((tablink, i) => {
			if (i === index) {
				tablink.classList.add('bg-violet-200');
				tablink.classList.remove('bg-violet-100');
			} else {
				tablink.classList.add('bg-violet-100');
				tablink.classList.remove('bg-violet-200');
			}
		});

		// Toggle content
		tabcontents.forEach((tabcontent, i) => {
			if (i === index) {
				tabcontent.classList.remove('hidden');
			} else {
				tabcontent.classList.add('hidden');
			}
		});
	}
	
	tablinks.forEach((tablink, index) => {
		tablink.addEventListener('click', (event) => switchTabsListener(event, tablink, index));
	});

	// Remove the event listeners if the image input wrapper is swapped.
	const imageWrapper = document.querySelector('.image-input-wrapper');
	const switchListener = (event) => {
		if (event.detail.xhr.status < 300) {
			imageWrapper.removeEventListener("htmx:afterSwap", switchListener);
			tablinks.forEach((tablink, index) => {
				tablink.removeEventListener('click', (event) => switchTabsListener(event, tablink, index));
			});
		}
	}
	imageWrapper.addEventListener("htmx:afterSwap", switchListener);
}

// Adds drag-events listeners to the body, unhides the dropzone when a file is being dragged.
// Updates the fileNameDisplay with the currently selected filename.

script indicateDragAndDrop(inputId string, dropzoneId string, fileNameId string) {
	const dropZone = document.getElementById(dropzoneId);

	["dragenter", "dragover"].forEach((eventName) => {
		document.body.addEventListener(eventName, (evt) => {
			if (evt.dataTransfer.types.includes("Files")) {
				dropZone.classList.remove("hidden");

				evt.preventDefault();

				if (evt.srcElement.id == dropzoneId) {
					evt.dataTransfer.dropEffect = "copy";
				} else {
					evt.dataTransfer.dropEffect = "none";
				}
			}
		});
	});

	const inputField = document.getElementById(inputId);
	const fileNameDisplay = document.getElementById(fileNameId);
	["dragleave", "drop"].forEach((eventName) => {
		document.body.addEventListener(eventName, (evt) => {
			dropZone.classList.add("hidden");

			evt.preventDefault();

			if (
				(evt.name =
					"drop" &&
					evt.dataTransfer.files.length == 1 &&
					evt.srcElement.id == dropzoneId)
			) {
				inputField.files = evt.dataTransfer.files;
				inputField.dispatchEvent(new Event("change"));
			}
		});
	});

	// if file changes (either chosen with file chooser or drag-and-dropped)
	inputField.addEventListener("change", (evt) => {
		const files = evt.target.files;
		if (files.length > 0) {
			fileNameDisplay.innerText = files[0].name;
		}
	});

	// set the file name display if there is a file selected already (may happen after refresh)
	if (inputField.files.length > 0) {
		fileNameDisplay.innerText = inputField.files[0].name;
	}

}

script openFileChooser(fileInputId string) {
	event.preventDefault();
	document.getElementById(fileInputId).click();
}
