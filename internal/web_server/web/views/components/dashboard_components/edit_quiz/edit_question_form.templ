package dashboard_components

import (
	"fmt"

	"github.com/Molnes/Nyhetsjeger/internal/models/articles"
	"github.com/Molnes/Nyhetsjeger/internal/models/questions"
	"github.com/Molnes/Nyhetsjeger/internal/web_server/web/views/components"
	"github.com/Molnes/Nyhetsjeger/internal/web_server/web/views/components/icons"
)

// Constants for the input names (for HTTP requests)
const (
	QuestionArticleURL = "question-article-url"
	QuestionText       = "question-text"
	QuestionImageURL   = "question-image-url"
	QuestionPoints     = "question-points"
	QuestionTimeLimit  = "question-time-limit"
)

// The form includes a list of articles to base the question on, the question itself,
// 4 answer alternatives (optional 2 to 4), and an image.
// If the question isNew = true, it will be appended to the list of questions.
// If the question isNew = false, it will replace the existing question in the list.
templ EditQuestionForm(question questions.Question, articles *[]articles.Article, quizID string, isNew bool) {
	<form id="edit-question-form">
		<h2 class="font-bold text-3xl mb-3">Rediger spørsmål</h2>
		// Article
		<label for="articles-list" class="block font-bold mb-1">Basert på artikkel</label>
		<select
			id="articles-list"
			name={ QuestionArticleURL }
			class="bg-purple-100 border border-clightindigo rounded-input w-full px-4 py-2 mb-5"
		>
			if len(*articles) == 0 {
				<option value="" disabled selected>Ingen artikler lagt til enda</option>
			} else {
				<option value="">Ingen artikkel valgt</option>
			}
			for _, article := range *articles {
				<option
					value={ article.ArticleURL.String() }
					if question.Article.ArticleURL == article.ArticleURL {
						selected
					}
				>{  article.Title }</option>
			}
		</select>
		// Question
		<label for="question" class="block font-bold mb-1">Spørsmål</label>
		<input
			id="question"
			name={ QuestionText }
			type="text"
			class="bg-purple-100 border border-clightindigo rounded-input w-full px-4 py-2 mb-5"
			value={ question.Text }
			placeholder="Hvilket år fikk Norge sin grunnlov?"
		/>
		// Alternatives
		@QuestionAlternativesInput(question.Alternatives)
		<div class="block mx-auto w-fit">
			@components.LoadingIndicator()
		</div>
		<button
			type="button"
			class="flex flex-row gap-1 items-center mt-3 mb-5 mx-auto px-4 py-2 rounded-button bg-clightindigo hover:bg-cindigo hover:text-white"
			hx-post="/api/v1/admin/question/randomize-alternatives"
			hx-swap="outerHTML"
			hx-target="#alternatives-table"
			hx-indicator="previous .htmx-indicator"
		>
			Tilfeldig alternativ rekkefølge
			@icons.Dice(20, "currentColor", 28, 28)
		</button>
		// Image
		<div class="flex flex-row items-center gap-3 mb-1">
			<label for={ QuestionImageURL } class="font-bold">Bilde (URL)</label>
			@components.TooltipButton("Ikke lag spørsmål basert på innholdet i bildet. Spillere med synshemninger kan ha problemer med å svare på slike spørsmål.")
			@components.LoadingIndicator()
		</div>
		@EditImageInput(fmt.Sprintf("/api/v1/admin/question/edit-image?question-id=%s", question.ID), &question.ImageURL, QuestionImageURL, !isNew, "")
		<div class="flex flex-row items-center flex-wrap mt-5 mb-3 gap-5 justify-between">
			// Points
			<div>
				<label for={ QuestionPoints } class="font-bold mr-1">Poeng</label>
				<select id={ QuestionPoints } name={ QuestionPoints } class="bg-purple-100 border border-clightindigo rounded-input px-4 py-2">
					for _, points := range []uint{0, 25, 50, 75, 100, 125, 150} {
						/* The points default 100 */
						<option
							value={ fmt.Sprint(points) }
							if question.Points == points {
								selected
							}
							if isNew && points == 100 {
								selected
							}
						>{ fmt.Sprint(points) }</option>
					}
				</select>
			</div>
			// Time limit
			<div>
				<label for={ QuestionTimeLimit } class="font-bold mr-1">Tidsbegrensning</label>
				<select id={ QuestionTimeLimit } name={ QuestionTimeLimit } class="bg-purple-100 border border-clightindigo rounded-input px-4 py-2">
					for _, seconds := range []uint{10, 15, 30, 45, 60} {
						/* The time limit is default 30 */
						<option
							value={ fmt.Sprint(seconds) }
							if question.TimeLimitSeconds == seconds {
								selected
							}
							if isNew && seconds == 30 {
								selected
							}
						>{ fmt.Sprintf("%d sekunder", seconds) }</option>
					}
				</select>
			</div>
		</div>
		<div class="block mx-auto w-fit">
			@components.LoadingIndicator()
		</div>
		@components.ErrorText("error-question", "")
		// Buttons
		<div class="flex flex-row justify-between gap-5 mt-5">
			<button
				id="close-modal-button"
				type="button"
				class="bg-clightindigo font-bold px-4 py-2 w-full rounded-button"
				onclick="closeModal()"
			>Avbryt</button>
			if !isNew {
				<button
					id="delete-question-button"
					type="button"
					class="bg-red-600 text-white font-bold px-4 py-2 w-full rounded-button"
					hx-delete={ fmt.Sprintf("/api/v1/admin/question/delete?question-id=%s", question.ID) }
					hx-swap="outerHTML"
					hx-target={ fmt.Sprintf("#question-%s", question.ID) }
					hx-target-4*=".error-question"
					hx-confirm="Er du sikker på at du ønsker å slette dette spørsmålet?"
					hx-indicator="previous .htmx-indicator"
				>Slett</button>
			}
			<button
				id="submit-question-button"
				type="submit"
				class="bg-clightindigo font-bold px-4 py-2 w-full rounded-button"
				hx-post={ fmt.Sprintf("/api/v1/admin/question/edit?quiz-id=%s&question-id=%s", quizID, question.ID) }
				if isNew {
					hx-swap="beforeend"
					hx-target="#question-list"
				} else {
					hx-swap="outerHTML"
					hx-target={ fmt.Sprintf("#question-%s", question.ID) }
				}
				hx-target-4*=".error-question"
				hx-sync="closest form:abort"
				hx-indicator="previous .htmx-indicator"
			>Lagre</button>
		</div>
	</form>
	<script>
    // Add event listener to each input element
		// Prevent the form from submitting when pressing enter
    document.querySelectorAll('#edit-question-form input').forEach(input => {
        input.addEventListener('keydown', function(event) {
            if (event.key === 'Enter') {
                event.preventDefault();
            }
        });
    });

		// Close the modal
		function closeModal() {
			const modal = document.getElementById("question-modal");
			modal.close();
		}

		// Close the modal after successful submit.
		// This applies to creating or updating questions.
		function afterSwapListener(event) {
			// If the error text is empty and the question list or its items has been updated
			if (event.detail.xhr.status === 200 && 
				(event.detail.target.id === "question-list" || event.detail.target.dataset.elementType === "question-list-item")) {
					closeModal();
					// Remove the event listener after the modal is closed.
					document.body.removeEventListener("htmx:afterSwap", afterSwapListener);
			}
		};
		document.body.addEventListener("htmx:afterSwap", afterSwapListener);

		// Close the modal after successful deletion.
		document.body.addEventListener('htmx:afterRequest', function(event) {
      if (event.detail.target.dataset.elementType === "question-list-item" && event.detail.xhr.status === 200) {
        closeModal();
      }
    }, {once: true});
	</script>
}
