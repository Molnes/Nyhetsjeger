@tailwind base;
@tailwind components;
@tailwind utilities;


/* Custom variables */
:root {
    /* Color */
    --cblue: #0085FF;
    --cindigo: #5B14F2;
    --cfuchsia: #CA1FFF;

    --gradient: linear-gradient(to bottom right, var(--cblue), var(--cindigo), var(--cfuchsia));

    /* Border radius */
    --br-button: 0.5rem;
    --br-card: 0.5rem;
    --br-input: 0.5rem;

    /* The inset of the gradient outline */
    --outline-inset: -3px;
}

/* CSS classes ".scrollbar-hide" and ".scrollbar-hide::-webkit-scrollbar" (next 2) taken from https://design2tailwind.com/blog/tailwindcss-hide-scrollbar/ */
/* For Webkit-based browsers (Chrome, Safari and Opera) */
.scrollbar-hide::-webkit-scrollbar {
    display: none;
}

/* For IE, Edge and Firefox */
.scrollbar-hide {
    -ms-overflow-style: none;
    /* IE and Edge */
    scrollbar-width: none;
    /* Firefox */
}


.htmx-indicator {
    opacity: 0;
    transition: opacity 100ms ease-in
}

.htmx-request .htmx-indicator {
    opacity: 1;
}

.htmx-request.htmx-indicator {
    opacity: 1;
}

/* Background Gradient */
.cgradient {
    background-image: var(--gradient);
}

a.cgradient:is(:hover, :focus),
.gradient-bg-button:is(:hover, :focus),
.gradient-outline:has(.cgradient:is(:hover, :focus))::after,
.answer-button:is(:hover, :focus):not(:disabled)::after,
.timer-low.gradient-outline-circle::after {
    animation: hueRotate 800ms linear infinite alternate;
}

.gradient-shadow:has(.cgradient:is(:hover, :focus))::before,
.answer-button:is(:hover, :focus):not(:disabled)::before {
    animation: hueRotateBlur 800ms linear infinite alternate;
}

@keyframes hueRotate {
    0% {
        filter: hue-rotate(0deg);
    }

    100% {
        filter: hue-rotate(80deg);
    }
}

@keyframes hueRotateBlur {
    0% {
        filter: hue-rotate(0deg) blur(0.5rem);
    }

    100% {
        filter: hue-rotate(80deg) blur(0.5rem);
    }
}

@property --timer-value {
    syntax: '<angle>';
    inherits: false;
    initial-value: 360deg;
}

#timer {
    --time: 0s;
    background-image: conic-gradient(#5a14f232 var(--timer-value, 0deg),
            #fff calc(var(--timer-value, 0deg) + 3deg) 360deg);
    animation: timer var(--time) linear forwards;
}

@keyframes timer {
    0% {
        --timer-value: 360deg;
    }

    100% {
        --timer-value: 00deg;
    }
}

/* Gradient Border */
.cgradient-border {
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

.gradient-shadow,
.gradient-shadow-always {
    position: relative;
}

.gradient-shadow::before,
.gradient-shadow-always::before {
    content: "";
    position: absolute;
    inset: var(--outline-inset);
    z-index: -1;
    background-color: var(--cindigo);
    border-radius: calc(var(--br-button) - var(--outline-inset));
    /* gradient using the custom properties */
    background-image: linear-gradient(125deg, var(--cblue), var(--cindigo), var(--cfuchsia));
    filter: blur(0.5rem);
    opacity: 0;
    transition: opacity 100ms linear;
}

/* When the gradient shadow element is either hovered or focused */
/* Display the blurry background gradient (functions like a shadow) */
.gradient-shadow:is(:hover, :focus-within)::before,
.gradient-shadow-always::before {
    opacity: 1;
}

.gradient-outline,
.gradient-outline-thick,
.gradient-outline-circle {
    position: relative;
}

.gradient-outline::after,
.gradient-outline-thick::after,
.gradient-outline-circle::after {
    content: "";
    position: absolute;
    inset: var(--outline-inset);
    z-index: -1;
    border-radius: calc(var(--br-button) - var(--outline-inset));
    background: var(--cindigo);
    background: linear-gradient(125deg, var(--cblue), var(--cindigo), var(--cfuchsia));
}

.gradient-outline-thick::after {
    inset: calc(var(--outline-inset) * 1.5);
    border-radius: calc(var(--br-button) - calc(1.5 * var(--outline-inset)));
}

.gradient-outline-circle::after {
    border-radius: 50%;
}

.tooltip-parent:is(:hover, :focus)>[role="tooltip"] {
    display: inline-block;
}

.tooltip-parent {
    position: relative;
}

.gradient-bg-button {
    @apply text-white font-sans rounded-button bg-center text-center cgradient font-bold;
}

.answer-button {
    @apply lg:text-lg leading-5 p-4 min-h-14 md:min-h-20 lg:min-h-24 rounded-button bg-white gradient-outline text-wrap;
}

@keyframes fadeOpacity {

    0%,
    75% {
        opacity: 1;
    }

    100% {
        opacity: 0;
    }
}

#question-list,
#article-list {
    counter-reset: css-counter 0;
}

#question-list li[data-element-type="question-list-item"],
#article-list li[data-element-type="article-list-item"] {
    counter-increment: css-counter 1;
}

#question-list li[data-element-type="question-list-item"]::before,
#article-list li[data-element-type="article-list-item"]::before {
    content: counter(css-counter) ". ";
    font-weight: bold;
    margin-right: 0.5rem;
    color: linkText;
}

#points-fill {
    --animation: spin linear infinite;
    --duration-1: 5s;
    --duration-2: 8s;

    --clip-path: inset(0 0 0 0 round 45%);
    --clip-path-2: inset(0 0 0 0 round 44%);

    --wave-size: 15rem;

    transition: top 3s linear;
}

.text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font: 700 56px Arial, sans-serif;
    text-align: center;
    margin: 0;
    color: white;
}

.circle {
    position: relative;
    width: 100%;
    height: 100%;
    clip-path: circle();
    overflow: hidden;
    background: var(--gradient);
    box-shadow: inset 0 0 2rem 1rem rgba(0, 0, 0, 0.2);
}

.primary-wave-filter,
.secondary-wave-filter {
    position: absolute;
    top: calc(-1 * var(--wave-size));
    height: var(--wave-size);
    width: var(--wave-size);
}

.primary-wave-filter::before,
.primary-wave-filter::after,
.secondary-wave-filter::before,
.secondary-wave-filter::after {
    content: "";
    position: absolute;
    inset: 0;
    background-color: white;
    clip-path: var(--clip-path);
    animation: var(--animation);
    animation-duration: var(--duration-1);
}

.primary-wave-filter::before,
.primary-wave-filter::after {
    mix-blend-mode: difference;
}

.secondary-wave-filter::before,
.secondary-wave-filter::after {
    clip-path: var(--clip-path-2);
    background-color: rgba(255, 255, 255, 0.2);
    transform: translateX(50px);
    animation-duration: var(--duration-2);
}

.primary-wave-filter::before,
.secondary-wave-filter::before {
    z-index: -1;
}

.primary-wave-filter::after,
.secondary-wave-filter::after {
    z-index: 1;
}

.primary-wave,
.secondary-wave {
    position: relative;
    width: 100%;
    height: 100%;
    background: black;
    clip-path: var(--clip-path);
    animation: var(--animation);
    animation-duration: var(--duration-1);
}

.secondary-wave {
    position: absolute;
    background: none;
    animation: var(--animation);
    animation-duration: var(--duration-2);
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

@media (prefers-contrast: more) {

    path,
    circle,
    rect {
        stroke: currentcolor;
    }

    /* If there is a fill, set it to currentColor */
    svg:not([fill="none"], [fill=""]),
    svg>*:not([fill="none"], [fill=""]) {
        fill: currentColor;
    }

    button,
    a {
        border: 1px solid transparent;
    }
}